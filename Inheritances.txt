# Single inheritance

# Base class
class Animal:
    def speak(self):
        print("Animal speaks")

# Derived class (inherits from Animal)
class Dog(Animal):
    def bark(self):
        print("Dog barks")

# Create object of derived class
d = Dog()

# Call methods
d.speak()  # Inherited method
d.bark()   # Method of derived class

************************************************
# Multiple inheritance

# Base class 1
class Father:
    def show_father(self):
        print("This is the Father class")

# Base class 2
class Mother:
    def show_mother(self):
        print("This is the Mother class")

# Derived class (inherits from Father and Mother)
class Child(Father, Mother):
    def show_child(self):
        print("This is the Child class")

# Create object of derived class
c = Child()

# Call methods
c.show_father()   # Method from Father
c.show_mother()   # Method from Mother
c.show_child()    # Method from Child

******************************************************
#Multilevel Inheritance

# Base class
class Grandfather:
    def show_grandfather(self):
        print("This is the Grandfather class")

# Derived class from Grandfather
class Father(Grandfather):
    def show_father(self):
        print("This is the Father class")

# Derived class from Father (multilevel)
class Child(Father):
    def show_child(self):
        print("This is the Child class")

# Create object of derived class
c = Child()

# Call methods
c.show_grandfather()  # Method from Grandfather
c.show_father()       # Method from Father
c.show_child()        # Method from Child

********************************************************
#Heirarchical inheritance

# Base class
class Parent:
    def show_parent(self):
        print("This is the Parent class")

# Derived class 1
class Child1(Parent):
    def show_child1(self):
        print("This is Child1 class")

# Derived class 2
class Child2(Parent):
    def show_child2(self):
        print("This is Child2 class")

# Create objects of derived classes
c1 = Child1()
c2 = Child2()

# Call methods
c1.show_parent()   # Inherited from Parent
c1.show_child1()   # Method from Child1

c2.show_parent()   # Inherited from Parent
c2.show_child2()   # Method from Child2

***********************************************************
#Hybrid inheritance

# Base class
class Person:
    def show_person(self):
        print("This is the Person class")

# First level derived class
class Student(Person):
    def show_student(self):
        print("This is the Student class")

# Another base class
class Sports:
    def show_sports(self):
        print("This is the Sports class")

# Hybrid derived class (inherits from both Student and Sports)
class StudentAthlete(Student, Sports):
    def show_student_athlete(self):
        print("This is the StudentAthlete class")

# Create object of derived class
sa = StudentAthlete()

# Call methods
sa.show_person()          # From Person
sa.show_student()         # From Student
sa.show_sports()          # From Sports
sa.show_student_athlete() # From StudentAthlete

***********************************************************

#Method Overriding

# Base class
class Animal:
    def sound(self):
        print("Animal makes a sound")

# Derived class
class Dog(Animal):
    def sound(self):
        print("Dog barks")

# Create objects
a = Animal()
d = Dog()

# Call the sound method
a.sound()  # Calls method from Animal
d.sound()  # Calls overridden method from Dog

**************************************************************
# MRO(Method Resolution Order)

class A:
    def show(self):
        print("Class A")

class B(A):
    def show(self):
        print("Class B")

class C(A):
    def show(self):
        print("Class C")

class D(B, C):
    pass

# Create object of class D
d = D()
d.show()           # Which show() gets called?
print(D.mro())     # Print the MRO

